<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/cmd/main/categories.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/cmd/main/categories.go" />
              <option name="originalContent" value="package main&#10;" />
              <option name="updatedContent" value="package main&#10;&#10;import (&#10;&#9;&quot;Backend/cmd/main/view_models/categories&quot;&#10;&#9;&quot;Backend/internal/store/models&quot;&#10;&#9;&quot;context&quot;&#10;&#9;&quot;github.com/go-chi/chi/v5&quot;&#10;&#9;&quot;github.com/google/uuid&quot;&#10;&#9;&quot;net/http&quot;&#10;)&#10;&#10;type categoryKey string&#10;&#10;const categoryCtx categoryKey = &quot;category&quot;&#10;&#10;// @Summary&#9;&#9;Creates Category&#10;// @Description&#9;Creates a new category with the provided info&#10;// @Tags&#9;&#9;&#9;categories&#10;// @Accept&#9;&#9;&#9;json&#10;// @Produce&#9;&#9;json&#10;// @Param&#9;&#9;&#9;payload&#9;body&#9;view_models.CreateCategoryPayload&#9;true&#9;&quot;Category creation payload&quot;&#10;// @Security&#9;&#9;ApiKeyAuth&#10;// @Success&#9;&#9;201&#9;{object}&#9;models.Category&#9;&quot;Created category&quot;&#10;// @Failure&#9;&#9;400&#9;{object}&#9;error&#9;&#9;&#9;&quot;Bad request&quot;&#10;// @Failure&#9;&#9;500&#9;{object}&#9;error&#9;&#9;&#9;&quot;Internal server error&quot;&#10;// @Router&#9;&#9;&#9;/categories [post]&#10;func (app *Application) createCategoryHandler(w http.ResponseWriter, r *http.Request) {&#10;&#9;var payload categories.CreateCategoryPayload&#10;&#10;&#9;if err := readJson(w, r, &amp;payload); err != nil {&#10;&#9;&#9;app.badRequest(w, r, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := Validate.Struct(payload); err != nil {&#10;&#9;&#9;app.badRequest(w, r, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;user := GetUserFromCtx(r)&#10;&#10;&#9;category := &amp;models.Category{&#10;&#9;&#9;BaseModel: models.BaseModel{&#10;&#9;&#9;&#9;CreatedBy: &amp;user.UserName,&#10;&#9;&#9;},&#10;&#9;&#9;Name:        payload.Name,&#10;&#9;&#9;Description: payload.Description,&#10;&#9;&#9;ImageURL:    payload.ImageURL,&#10;&#9;&#9;ParentID:    payload.ParentID,&#10;&#9;}&#10;&#10;&#9;ctx := r.Context()&#10;&#10;&#9;if err := app.Store.Categories.Create(ctx, category); err != nil {&#10;&#9;&#9;app.internalServerError(w, r, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := app.jsonResponse(w, http.StatusCreated, category); err != nil {&#10;&#9;&#9;app.internalServerError(w, r, err)&#10;&#9;}&#10;}&#10;&#10;// @Summary&#9;&#9;Update Category&#10;// @Description&#9;Update a category with the provided info&#10;// @Tags&#9;&#9;&#9;categories&#10;// @Accept&#9;&#9;&#9;json&#10;// @Produce&#9;&#9;json&#10;// @Param&#9;&#9;&#9;id&#9;&#9;path&#9;string&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;true&#9;&quot;Category ID&quot;&#10;// @Param&#9;&#9;&#9;payload&#9;body&#9;view_models.UpdateCategoryPayload&#9;true&#9;&quot;Category update payload&quot;&#10;// @Security&#9;&#9;ApiKeyAuth&#10;// @Success&#9;&#9;200&#9;{object}&#9;models.Category&#9;&quot;Updated category&quot;&#10;// @Failure&#9;&#9;400&#9;{object}&#9;error&#9;&#9;&#9;&quot;Bad request&quot;&#10;// @Failure&#9;&#9;500&#9;{object}&#9;error&#9;&#9;&#9;&quot;Internal server error&quot;&#10;// @Router&#9;&#9;&#9;/categories/{id} [put]&#10;func (app *Application) updateCategoryHandler(w http.ResponseWriter, r *http.Request) {&#10;&#9;var payload categories.UpdateCategoryPayload&#10;&#10;&#9;if err := readJson(w, r, &amp;payload); err != nil {&#10;&#9;&#9;app.badRequest(w, r, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := Validate.Struct(payload); err != nil {&#10;&#9;&#9;app.badRequest(w, r, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;user := GetUserFromCtx(r)&#10;&#9;category := GetCategoryFromCtx(r)&#10;&#10;&#9;category.Name = payload.Name&#10;&#9;category.Description = payload.Description&#10;&#9;category.ImageURL = payload.ImageURL&#10;&#9;category.ParentID = payload.ParentID&#10;&#9;category.UpdatedBy = &amp;user.UserName&#10;&#10;&#9;if err := app.Store.Categories.Update(r.Context(), category); err != nil {&#10;&#9;&#9;app.internalServerError(w, r, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := app.jsonResponse(w, http.StatusOK, category); err != nil {&#10;&#9;&#9;app.internalServerError(w, r, err)&#10;&#9;}&#10;}&#10;&#10;// @Summary&#9;&#9;Delete Category&#10;// @Description&#9;Delete a category by its ID&#10;// @Tags&#9;&#9;&#9;categories&#10;// @Accept&#9;&#9;&#9;json&#10;// @Produce&#9;&#9;json&#10;// @Security&#9;&#9;ApiKeyAuth&#10;// @Param&#9;&#9;&#9;categoryId&#9;path&#9;&#9;string&#9;true&#9;&quot;Category ID&quot;&#10;// @Success&#9;&#9;204&#9;&#9;&#9;{object}&#9;string&#9;&quot;Category deleted successfully&quot;&#10;// @Failure&#9;&#9;400&#9;&#9;&#9;{object}&#9;error&#9;&quot;Bad request&quot;&#10;// @Failure&#9;&#9;404&#9;&#9;&#9;{object}&#9;error&#9;&quot;Category not found&quot;&#10;// @Failure&#9;&#9;500&#9;&#9;&#9;{object}&#9;error&#9;&quot;Internal server error&quot;&#10;// @Router&#9;&#9;&#9;/categories/{categoryId} [delete]&#10;func (app *Application) deleteCategoryHandler(w http.ResponseWriter, r *http.Request) {&#10;&#9;ctx := r.Context()&#10;&#9;category := GetCategoryFromCtx(r)&#10;&#9;user := GetUserFromCtx(r)&#10;&#10;&#9;category.DeletedBy = &amp;user.UserName&#10;&#10;&#9;if err := app.Store.Categories.Delete(ctx, category); err != nil {&#10;&#9;&#9;app.internalServerError(w, r, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;w.WriteHeader(http.StatusNoContent)&#10;}&#10;&#10;// @Summary&#9;&#9;Get all Categories&#10;// @Description&#9;Get all categories&#10;// @Tags&#9;&#9;&#9;categories&#10;// @Accept&#9;&#9;&#9;json&#10;// @Produce&#9;&#9;json&#10;// @Security&#9;&#9;ApiKeyAuth&#10;// @Success&#9;&#9;200&#9;{object}&#9;[]models.Category&#9;&quot;List of categories&quot;&#10;// @Failure&#9;&#9;500&#9;{object}&#9;error&#9;&#9;&#9;&#9;&quot;Internal server error&quot;&#10;// @Router&#9;&#9;&#9;/categories [get]&#10;func (app *Application) getAllCategoriesHandler(w http.ResponseWriter, r *http.Request) {&#10;&#9;ctx := r.Context()&#10;&#10;&#9;categories, err := app.Store.Categories.GetAll(ctx)&#10;&#10;&#9;if err != nil {&#10;&#9;&#9;app.internalServerError(w, r, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := app.jsonResponse(w, http.StatusOK, categories); err != nil {&#10;&#9;&#9;app.internalServerError(w, r, err)&#10;&#9;}&#10;}&#10;&#10;// @Summary&#9;&#9;Get Category&#10;// @Description&#9;Get a category by its ID&#10;// @Tags&#9;&#9;&#9;categories&#10;// @Accept&#9;&#9;&#9;json&#10;// @Produce&#9;&#9;json&#10;// @Security&#9;&#9;ApiKeyAuth&#10;// @Param&#9;&#9;&#9;categoryId&#9;path&#9;&#9;string&#9;&#9;&#9;true&#9;&quot;Category ID&quot;&#10;// @Success&#9;&#9;200&#9;&#9;&#9;{object}&#9;models.Category&#9;&quot;Category&quot;&#10;// @Failure&#9;&#9;400&#9;&#9;&#9;{object}&#9;error&#9;&#9;&#9;&quot;Bad request&quot;&#10;// @Failure&#9;&#9;404&#9;&#9;&#9;{object}&#9;error&#9;&#9;&#9;&quot;Category not found&quot;&#10;// @Failure&#9;&#9;500&#9;&#9;&#9;{object}&#9;error&#9;&#9;&#9;&quot;Internal server error&quot;&#10;// @Router&#9;&#9;&#9;/categories/{categoryId} [get]&#10;func (app *Application) getCategoryHandler(w http.ResponseWriter, r *http.Request) {&#10;&#9;category := GetCategoryFromCtx(r)&#10;&#10;&#9;if err := app.jsonResponse(w, http.StatusOK, category); err != nil {&#10;&#9;&#9;app.internalServerError(w, r, err)&#10;&#9;}&#10;}&#10;&#10;func (app *Application) categoriesContextMiddleware(next http.Handler) http.Handler {&#10;&#9;return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#10;&#9;&#9;idParam := chi.URLParam(r, &quot;categoryId&quot;)&#10;&#9;&#9;idAsUuid, err := uuid.Parse(idParam)&#10;&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;app.badRequest(w, r, err)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;ctx := r.Context()&#10;&#10;&#9;&#9;category, err := app.Store.Categories.GetById(ctx, idAsUuid)&#10;&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;app.handleError(w, r, err)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;ctx = context.WithValue(ctx, categoryCtx, category)&#10;&#10;&#9;&#9;next.ServeHTTP(w, r.WithContext(ctx))&#10;&#9;})&#10;}&#10;&#10;func GetCategoryFromCtx(r *http.Request) *models.Category {&#10;&#9;category, _ := r.Context().Value(categoryCtx).(*models.Category)&#10;&#9;return category&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/cmd/main/view_models/categories/category_payloads.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/cmd/main/view_models/categories/category_payloads.go" />
              <option name="updatedContent" value="package categories&#10;&#10;type CreateCategoryPayload struct {&#10;&#9;Name        string  `json:&quot;name&quot; validate:&quot;required,max=100&quot;`&#10;&#9;Description *string `json:&quot;description,omitempty&quot; validate:&quot;omitempty,max=500&quot;`&#10;&#9;ImageURL    *string `json:&quot;image_url,omitempty&quot; validate:&quot;omitempty,url&quot;`&#10;&#9;ParentID    *string `json:&quot;parent_id,omitempty&quot; validate:&quot;omitempty,uuid&quot;`&#10;}&#10;&#10;type UpdateCategoryPayload struct {&#10;&#9;Name        string  `json:&quot;name&quot; validate:&quot;required,max=100&quot;`&#10;&#9;Description *string `json:&quot;description,omitempty&quot; validate:&quot;omitempty,max=500&quot;`&#10;&#9;ImageURL    *string `json:&quot;image_url,omitempty&quot; validate:&quot;omitempty,url&quot;`&#10;&#9;ParentID    *string `json:&quot;parent_id,omitempty&quot; validate:&quot;omitempty,uuid&quot;`&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/cmd/migrate/migrations/000013_add_categories_table.up.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/cmd/migrate/migrations/000013_add_categories_table.up.sql" />
              <option name="updatedContent" value="CREATE TABLE IF NOT EXISTS categories (&#10;    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),&#10;    created_by VARCHAR(255),&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    image_url TEXT,&#10;    parent_id UUID REFERENCES categories(id) ON DELETE SET NULL,&#10;    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,&#10;    updated TIMESTAMP,&#10;    updated_by VARCHAR(255),&#10;    deleted TIMESTAMP,&#10;    deleted_by VARCHAR(255)&#10;);&#10;&#10;CREATE INDEX IF NOT EXISTS idx_categories_name ON categories(name);&#10;CREATE INDEX IF NOT EXISTS idx_categories_parent_id ON categories(parent_id);&#10;CREATE INDEX IF NOT EXISTS idx_categories_deleted ON categories(deleted);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>