basePath: /v1
definitions:
  models.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  models.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  models.User:
    properties:
      avatar:
        type: string
      born_date:
        type: string
      created_at:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      lastName:
        type: string
      phone_number:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: integer
      updated_at:
        type: string
      userName:
        type: string
    type: object
  view_models.CreatePostCommentPayload:
    properties:
      comment:
        type: string
    type: object
  view_models.CreatePostPayload:
    properties:
      content:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - title
    type: object
  view_models.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  view_models.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  view_models.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      title:
        maxLength: 100
        type: string
    type: object
  view_models.UserWithToken:
    properties:
      avatar:
        type: string
      born_date:
        type: string
      created_at:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      lastName:
        type: string
      phone_number:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: integer
      token:
        type: string
      updated_at:
        type: string
      userName:
        type: string
    type: object
info:
  contact:
    email: jeudrypp@gmail.com
    name: API Support
    url: http://www.swagger.io/support
  description: Api for RosaFiesta a decoration enterprise management system
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Create a new token
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/view_models.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Create a new token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/view_models.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/view_models.UserWithToken'
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Register a new user
      tags:
      - authentication
  /health:
    get:
      consumes:
      - application/json
      description: Returns the health status of the Application
      produces:
      - application/json
      responses:
        "200":
          description: Health status, environment, and version
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema: {}
      summary: Health Check
      tags:
      - health
  /posts:
    post:
      consumes:
      - application/json
      description: Create a new post with the provided title, content, and tags
      parameters:
      - description: Post creation payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/view_models.CreatePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{postId}:
    delete:
      consumes:
      - application/json
      description: Delete a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Post not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete an existing post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update the title and/or content of an existing post
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: Post update payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/view_models.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Updated post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Post not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update an existing post
      tags:
      - posts
  /posts/{postId}/comments:
    post:
      consumes:
      - application/json
      description: Create a new comment for a specific post
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: Comment creation payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/view_models.CreatePostCommentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Created comment
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new comment for a post
      tags:
      - comments
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/active/{token}:
    put:
      consumes:
      - application/json
      description: Activates/Register a user by invitation token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates/Register a user
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Retrieves the feed for a user with pagination and sorting options
      parameters:
      - description: User ID
        in: path
        name: limit
        required: true
        type: integer
      - description: User ID
        in: path
        name: offset
        required: true
        type: integer
      - description: User ID
        in: path
        name: sort
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of posts in the user's feed
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get User Feed
      tags:
      - feed
securityDefinitions:
  ApiKeyAuth:
    description: Provide your API key to access this API
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
